name: Deploy to Azure Container Apps

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: video-transcribe
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Run tests
      run: npm test --if-present

    - name: Azure CLI login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Build and push Docker image
      run: |
        az acr build \
          --registry ${{ secrets.ACR_NAME }} \
          --image ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
          --image ${{ env.IMAGE_NAME }}:latest \
          .

    - name: Deploy to Azure Container Apps
      run: |
        # Check if Container App exists
        if az containerapp show --name ${{ secrets.CONTAINER_APP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} &> /dev/null; then
          echo "Updating existing Container App..."
          az containerapp update \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --set-env-vars \
              AZURE_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
              AZURE_RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}" \
              AZURE_ACCOUNT_NAME="${{ secrets.AZURE_ACCOUNT_NAME }}" \
              AZURE_AI_FOUNDRY_ENDPOINT="${{ secrets.AZURE_AI_FOUNDRY_ENDPOINT }}" \
              AZURE_OPENAI_ENDPOINT="${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
              AZURE_AI_SERVICES_ENDPOINT="${{ secrets.AZURE_AI_SERVICES_ENDPOINT }}" \
              AZURE_SPEECH_TO_TEXT_ENDPOINT="${{ secrets.AZURE_SPEECH_TO_TEXT_ENDPOINT }}" \
              GPT_TRANSCRIBE_MODEL="${{ secrets.GPT_TRANSCRIBE_MODEL }}" \
              GPT_AUDIO_MODEL="${{ secrets.GPT_AUDIO_MODEL }}" \
              PORT="3000" \
              LOG_LEVEL="info"
        else
          echo "Creating new Container App..."
          # Create Container Apps environment if it doesn't exist
          az containerapp env create \
            --name ${{ secrets.ENVIRONMENT_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --location ${{ secrets.LOCATION }} || true

          # Create managed identity if it doesn't exist
          IDENTITY_ID=$(az identity show \
            --name ${{ secrets.IDENTITY_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --query id -o tsv 2>/dev/null || \
          az identity create \
            --name ${{ secrets.IDENTITY_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --location ${{ secrets.LOCATION }} \
            --query id -o tsv)

          # Assign ACR pull permission to managed identity
          ACR_ID=$(az acr show --name ${{ secrets.ACR_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query id -o tsv)
          az role assignment create \
            --assignee $IDENTITY_ID \
            --scope $ACR_ID \
            --role AcrPull || true

          # Create Container App
          az containerapp create \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --environment ${{ secrets.ENVIRONMENT_NAME }} \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --user-assigned $IDENTITY_ID \
            --registry-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --registry-identity $IDENTITY_ID \
            --target-port 3000 \
            --ingress external \
            --min-replicas 1 \
            --max-replicas 10 \
            --cpu 1 \
            --memory 2Gi \
            --env-vars \
              AZURE_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
              AZURE_RESOURCE_GROUP="${{ secrets.AZURE_RESOURCE_GROUP }}" \
              AZURE_ACCOUNT_NAME="${{ secrets.AZURE_ACCOUNT_NAME }}" \
              AZURE_AI_FOUNDRY_ENDPOINT="${{ secrets.AZURE_AI_FOUNDRY_ENDPOINT }}" \
              AZURE_OPENAI_ENDPOINT="${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
              AZURE_AI_SERVICES_ENDPOINT="${{ secrets.AZURE_AI_SERVICES_ENDPOINT }}" \
              AZURE_SPEECH_TO_TEXT_ENDPOINT="${{ secrets.AZURE_SPEECH_TO_TEXT_ENDPOINT }}" \
              GPT_TRANSCRIBE_MODEL="${{ secrets.GPT_TRANSCRIBE_MODEL }}" \
              GPT_AUDIO_MODEL="${{ secrets.GPT_AUDIO_MODEL }}" \
              PORT="3000" \
              LOG_LEVEL="info" \
              API_KEY=secretref:api-key \
            --secrets \
              azure-api-key="${{ secrets.AZURE_API_KEY }}" \
              api-key="${{ secrets.API_KEY }}"
        fi

    - name: Get application URL
      run: |
        APP_URL=$(az containerapp show \
          --name ${{ secrets.CONTAINER_APP_NAME }} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn -o tsv)
        
        echo "üöÄ Deployment completed successfully!"
        echo "üåê Application URL: https://$APP_URL"
        echo "üè• Health Check: https://$APP_URL/health"
        echo "üìñ API Documentation: https://$APP_URL/agent-example"

    - name: Test deployment
      run: |
        APP_URL=$(az containerapp show \
          --name ${{ secrets.CONTAINER_APP_NAME }} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn -o tsv)
        
        # Wait for deployment to be ready
        sleep 30
        
        # Test health endpoint
        curl -f "https://$APP_URL/health" || exit 1
        echo "‚úÖ Health check passed!"
